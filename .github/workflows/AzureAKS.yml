name: Create Azure AKS With Terraform
on:
  workflow_dispatch:

permissions:
      id-token: write
      contents: read
jobs: 
  AKS-Cluster-Deployment:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout
        uses: actions/checkout@v3.1.0

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Authenticate Azure CLI
        run: az login

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2.0.2
        with:
          terraform_version: latest
          cli_config_credentials_token: ${{ secrets.TFC_TOKEN_ID }}

      - name: Terraform Init
        id: init
        run: terraform init
      
      - name: Terraform Validate
        id: validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        run: terraform plan
        continue-on-error: true

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        run: terraform apply -auto-approve

      - name: Terraform Output
        run: terraform output

      #- name: Deploy Application
      #  run: |
      #    az aks get-credentials -n "teachua-deployment-AKS-NatVor" -g "${{ steps.get_rg_name.outputs.resource_group_name }}"
      #   kubectl apply -f ./kubernetes/
      #   sleep 40
      #   kubectl get service -o wide
      #   rm -rf ~/.kube
       #  id: get_rg_name
       #env:
       # ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
       # ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
       # ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
       # ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }} 
          
